SYSTEM ENUMERATION

enumerate the kernel:

uname -a

cat /proc/version

cat/etc/issue

take a look at the architexture
lscpu

enumerate the running services:
ps aux

see what users are runnng what tasks:
ps aux | grep root

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 USER ENUMERATION
 
 figure out what user you are:
 whoami
 
 id 
 *pay attention to what user groups your user is in as well 
 
 look for what privileges are user might have:
 sudo -l
 
 see what users are on the box:
 cat /etc/passwd
 
 pull down just the users from etc passwd:
 cat /etc/passwd | cut -d : -f 1
 
 see if we have access to /etc/shadow:
 cat /etc/shadow 
 
 can we access the /etc/group file:
 cat /etc/group
 
check history:
history
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
AUTOMATED TOOLS




-------------------------------------------------------------------------------------------------------------------------------------------------------------------
CRON JOBS

see if cron jobs are runnng: (by looking into the process's)
ps -ef

see what cron jobs are scheduled by the user:
crontab -l
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
FILE PERMISSIONS  

the following command will look for files (and not symlinks etc) which is world writeable:
find / -not -type l -perm o+w

use open ssl to generate password entries:
openssl passwd -1 -salt abc password

there are three types of file permissions in unix

Read (r)  permission to read the file
write (w) permission to modify the file
execute (x) permission to Execute/Run the file 

The users are classified in UGO
U - User
G - Group
O - others

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
UNDERSTANDING PERMISSIONS IN LINUX 

At a basic level permissions in linux are a relationship between users, groups, and files & directories.

Users can belong to multiple groups

groups can have multiple users

every file and directory defines its permissions in terms of a user, a group, and others (all other users)

USERS:

user accounts are configured in the /etc/passwd file

user password hashes are stored in the /etc/shadow file

users are identified by an integer user ID (UID)

the "root" user account is a special type of account in linux. it has a UID of 0, and th system grants this use access to
every file

command chown: to change the owner and group of the file
command chmod: to change file permissions

SETUID BIT:
the setuid bit indicates that when running the executable it will set its permissions to that of its owner instead of setting
it to the user who launched it. 

GROUPS:

groups are configured in the /etc/group file

users have a primary group and can have multiple secondary or suplementary groups

By default, a user's primary group has the same name as their user account

FILES AND DIRECTORIES

All Files and directories have a single owner and group

Permissions are defined in terms of read, write, and execute operations.

There are three sets of permissions, one for the owner, one for the group, and one for all "other" users
(can also be reffered to as "world")

only the owner can change permissions

DIRECTORY PERMISSIONS

Execute - when set, the directory can be entered. Without this permission, neither the read nor write permissions will work

Read - when set, the directory contents can be listed

Write - when set, files and subdirectories can be created in the directory 

SPECIAL PERMISSIONS

setuid (SUID) bit
when set files will get executed with the privileges of the file owner.

Setgid (SGID) bit
when set on a file, the file will get executed with the privieleges of the file group

when set on  directory, files created within that directory will inherit the group of the directory itself
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
KERNEL EXPLOITS

Kernels are the core of any OS

think of it as a layer between application software and the actual compiter hardware

the kernel is a computer program that controls everything in the system

the kernel has complete control over the operation system. Exploiting a kernel vuln can result in execution as the root user

1. enumerate kernel version (uname -a)
2. find matching exploits on google, exploitdb, Github
3. compile and run

searching for kernel exploits with searchsploit example:
searchsploit linux kernel 2.6.32 priv esc

searchsploit example to get correct distro in the results:
searchsploit linux kernel 2.6 debian priv esc

SCRIPTS FOR EXPLOITING KERNEL VULNERABILITIES:
linux-exploit-suggester.sh

enumerate the kernel version:
uname -a
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
SERVICE EXPLOITS

services are simply programs that run in the background, accepting input or performing regular tasks

if vulnerable services are running as root, exploiting them can lead to command execution as root

service exploits can be found using Searchsploit, Google, and Github, just like with kernel exploits

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEAK FILE PERMISSIONS 

certain system fies can be takn advantage of to perform privilege escalation if the permissions on them are too weak

if a system file has confidential information we can read, it may be used to gain access to the root account.

if a system file can be written to we may be able to modify the way the operating system works and gain root access that way


/ETC/SHADOW

the /etc/shadow file contains user password hashes, and by default is not readable by any user except for root.

if we are able o read the contents of the /etc/shadow file, we might be able to crack the root user's password hash.

if we are able to modify the /etc/shadow file we can replace the rot user's password hash with one we know.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
SUDO
                                                                    
sudo is a program which lets users run other programs with the security privileges of other users. By default that oher user will be root

A user generally needs to enter their password to use sudo and they must be permitted access via rules in the /etc/sudoers file.

Rules can be used to limit users to certain programs and forgo the password entry requirment 


By far the most obvious privelage escalation with sudo is to use suda as it was intended

if your low privelege user account can use sudo unrestricted (meaning you can run any programs) and you know the users password, privilege escalation is easy
by using the "switch user" su command to spawn a root shell

if for some reason the su program is not allowed there are many other ways to escalate privileges:
sudo -s
sudo -i 
sudo /bin/bash
sudo passwd

even if there are "no obvious" methods for escalating privileges we may be able to use a shell escape sequence

even if we are restricted to running certain programs via sudo it is sometimes possible to "escape" the program and spawn a shell

since the inital program runs with root privileges so does the spawned shell

SHELL ESCAPE SEQUENCES:
https://gtfobins.github.io/

ABUSING SUDO INTENDED FUNCTIONALITY

if a program doesnt have an escape sequence it may still be possible to use it to escalate privileges

if we can read files owned by root we may be able to ectract usefull information 

if we can write to files owned by root we may be able to insert or modify information 

SUDO ABUSE WITH APACHE

run the command:
sudo -l 
(if you see the output (root) NOPASSWD: /usr/sbin/apache2) this technique will probably work. 

now run the command:
sudo apache2 -f /etc/shadow
(copy the root users password hash and see if you can crack the hash)


ABUSING SUDO ENVIRONMENT VARIABLES

programs run through sudo can inherit the environment variables from the users environment.

in the /etc/sudoers config file if the env_reset option is set, sudo will run programs in a new, minimal environment

the env_keep option can be used to keep certain environment variables from the users environment

the configured options are displayed when running:
sudo -l

ABUSING LD_PRELOAD

ld_preload is an environment variable which can be set to the path of a shared object (.so) file

when set, the shared object will be loaded before any others

by creating a custom shared object and creating an init() function, we can execute code as soon as the object is loaded.

LD_PRELOAD LIMITATIONS

ld_preload will not work if the real user ID is different from the Effective user ID

sudo must be configured to preserve the LD_PRELOAD environment variable using the env_keep option

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
CRON JOBS

cron jobs are programs or scripts which users can schedual to run at specific times ot intervals 

cron jobs run with the security level of the user who owns them 

by default cron jobs run using the /bin/sh shell, with limited environment variables

Cron table files or crontabs store the configuration for cron jobs

user crontabs are usually located in /var/spool/cron or /var/spool/cron/crontabs/

the system wide crontab is located at /etc/crontab

CRON JOBS AND FILE PERMISSIONS

misconfigurations of file permissions associated ih cron jobs can lead to easy privilege escalation 

if we can write to a program or script which gets run a part of a cron job we can replace it with our own code

the easiest example of the is a .sh cron job with writeable permissions and we overwrite that file with a reverse shell and wait for it to run 

CRONTAB PATH ENVIRONMENT VARIABLE

the crontab PATH environment variable is by default set to "/usr/bin:/bin"

the PATH variable can be overwritten in the crontab file 

if a cron job program/script does not use an apsolut path and one of the PATH directories is writeable by our user, we may be able to creat a program/script
with the same name as the cron job 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
























